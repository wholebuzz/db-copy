name: test
on: [push]
jobs:
  build:
    runs-on: ubuntu-latest
    services:
      elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:7.10.2-amd64
        env:
          ELASTIC_PASSWORD: foobar
          discovery.type: single-node
        ports:
          - 9200:9200
        options: >-
          --health-cmd "curl -u elastic:foobar -s -f localhost:9200/_cat/health >/dev/null || exit 1"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 3
      mongodb:
        image: mongo:latest
        env:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: example
          MONGO_INITDB_DATABASE: test_db
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongo --eval \"db.getMongo()\""
          --health-interval 30s
          --health-timeout 10s
          --health-retries 3
      mssql:
        image: mcr.microsoft.com/mssql/server:2017-latest-ubuntu
        env:
          ACCEPT_EULA: Y
          MSSQL_PID: Express
          SA_PASSWORD: Secure-Password.1234
        ports:
          - 1433:1433
        options: >-
          --health-cmd "/opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P Secure-Password.1234 -Q \"SELECT 1\" || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3
      mysql:
        image: mysql:5.7.13
        env:
          MYSQL_DATABASE: test_db
          MYSQL_USER: user
          MYSQL_PASSWORD: password
          MYSQL_ROOT_PASSWORD: rootpassword
        ports:
          - 3306:3306
        options: >-
          --health-cmd "mysqladmin ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3
      postgres:
        image: postgres
        env:
          POSTGRES_DB: dbcptest
          POSTGRES_USER: admin
          POSTGRES_PASSWORD: abracadabra
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
        ports:
          - 5432:5432
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js
      uses: actions/setup-node@v1
      with:
        node-version: '12.x'
    - name: Install dependencies
      run: yarn --frozen-lockfile
    - name: Build tree
      run: yarn build
    - name: Run tests
      run: yarn test:coverage
      shell: bash
      env:
        ES_ENDPOINT: http://localhost:9200/
        ES_USER: elastic
        ES_PASS: foobar
        MONGODB_DB_USER: root
        MONGODB_DB_PASS: example
        MONGODB_DB_NAME: test_db
        MONGODB_DB_PORT: 27017
        MONGODB_DB_HOST: 127.0.0.1
        MSSQL_DB_USER: SA
        MSSQL_DB_PASS: Secure-Password.1234
        MSSQL_DB_NAME: master
        MSSQL_DB_HOST: 127.0.0.1
        MSSQL_DB_PORT: 1433
        MYSQL_DB_USER: root
        MYSQL_DB_PASS: rootpassword
        MYSQL_DB_NAME: test_db
        MYSQL_DB_HOST: 127.0.0.1
        MYSQL_DB_PORT: 3306
        POSTGRES_DB_USER: admin
        POSTGRES_DB_PASS: abracadabra
        POSTGRES_DB_NAME: postgres
        POSTGRES_DB_HOST: 127.0.0.1
        POSTGRES_DB_PORT: 5432
    - name: Setup gcloud
      uses: google-github-actions/setup-gcloud@master
      with:
        project_id: ${{ secrets.GCLOUD_PROJECT }}
        service_account_key: ${{ secrets.GCLOUD_SA_KEY }}
        export_default_credentials: true
    - name: Upload test coverage
      run: 'yarn badge:coverage && gsutil cp coverage/coverage.svg gs://wholebuzz/dbcp/coverage.svg'
      shell: bash
